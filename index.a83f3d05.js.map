{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js"],"sourcesContent":["'use strict';\nvar $a5fd07fa01589658$exports = {};\n'use strict';\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */ class $a5fd07fa01589658$var$Game {\n    /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */ static initialTable = [\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ]\n    ];\n    constructor(pageRows){\n        this.state = {\n            newTiles: [],\n            isAnimationTriggered: true,\n            tableState: JSON.parse(JSON.stringify($a5fd07fa01589658$var$Game.initialTable)),\n            pageRows: pageRows,\n            score: 0,\n            best: 0,\n            status: 'idle',\n            isAnimating: false\n        };\n        this.config = {\n            transitionTime: 90,\n            renderTime: 100\n        };\n    }\n    moveLeft() {\n        this.executeMove('left');\n    }\n    moveRight() {\n        this.executeMove('right');\n    }\n    moveUp() {\n        this.executeMove('up');\n    }\n    moveDown() {\n        this.executeMove('down');\n    }\n    checkGameOver(arr) {\n        const copyArr = JSON.parse(JSON.stringify(arr));\n        const isNoHorizontalMerges = copyArr.every((row)=>{\n            return row.every((cell, cellIndex)=>{\n                if (cell === 0) return false;\n                if (cellIndex < row.length - 1) return cell !== row[cellIndex + 1];\n                return true;\n            });\n        });\n        const isNoVerticalMerges = this.rotateCounterClockwise(copyArr).every((row)=>{\n            return row.every((cell, cellIndex)=>{\n                if (cell === 0) return false;\n                if (cellIndex < row.length - 1) return cell !== row[cellIndex + 1];\n                return true;\n            });\n        });\n        if (isNoHorizontalMerges && isNoVerticalMerges) this.endGame();\n    }\n    async executeMove(direction) {\n        setTimeout(()=>{\n            this.state.isAnimating = false; // Анімація завершена\n        }, this.config.renderTime + 20);\n        if (this.state.isAnimating) return;\n        this.state.isAnimating = true;\n        this.renderTileCSS(direction); // Очікуємо завершення анімації плиток\n        this.handleMovement(direction); // Виконуємо рух на полі\n        setTimeout(()=>{\n            this.renderCells();\n        }, this.config.renderTime);\n        if (this.state.isAnimationTriggered) this.addNewTile();\n        this.checkGameOver(this.state.tableState);\n    }\n    transpose(matrix) {\n        const result = [];\n        for(let i = 0; i < matrix[0].length; i++){\n            result[i] = [];\n            for(let j = 0; j < matrix.length; j++)result[i][j] = matrix[j][i];\n        }\n        return result;\n    }\n    rotateClockwise(matrix) {\n        const transposed = this.transpose(matrix);\n        for(let i = 0; i < transposed.length; i++)transposed[i] = transposed[i].reverse();\n        return transposed;\n    }\n    rotateCounterClockwise(matrix) {\n        for(let i = 0; i < matrix.length; i++)matrix[i] = matrix[i].reverse();\n        return this.transpose(matrix);\n    }\n    sortZeros(arr, direction) {\n        const zeros = arr.filter((el)=>el === 0);\n        const nonZeros = arr.filter((el)=>el !== 0);\n        if (direction === 'left' || direction === 'up') return nonZeros.concat(zeros);\n        if (direction === 'down' || direction === 'right') return zeros.concat(nonZeros);\n    }\n    handleMovement(direction) {\n        let mergedTable = JSON.parse(JSON.stringify(this.state.tableState));\n        // Якщо напрямок 'вгору' чи 'вниз' обертаю масив\n        if (direction === 'up' || direction === 'down') mergedTable = this.rotateCounterClockwise(mergedTable);\n        // Тепер сортуємо та об'єдную рядки\n        mergedTable = mergedTable.map((row, rowIndex)=>{\n            const sortedRow = this.sortZeros(row, direction);\n            const mergedRow = ()=>{\n                for(let i = 0; i < sortedRow.length; i++)if (sortedRow[i] === sortedRow[i + 1]) {\n                    sortedRow[i] += sortedRow[i + 1];\n                    this.state.score += sortedRow[i];\n                    if (sortedRow[i] === 137156) this.endGame('win');\n                    sortedRow[i + 1] = 0;\n                    i++; // Пропускаємо наступну ітерацію після злиття\n                }\n                return this.sortZeros(sortedRow, direction);\n            };\n            return mergedRow();\n        });\n        if (this.isEqual(this.state.tableState, mergedTable)) this.state.isAnimationTriggered = false;\n        else this.state.isAnimationTriggered = true;\n        // Якщо напрямок 'вгору' чи 'вниз' обертаю масив назад\n        if (direction === 'up' || direction === 'down') mergedTable = this.rotateClockwise(mergedTable);\n        if (this.isEqual(this.state.tableState, mergedTable)) this.state.isAnimationTriggered = false;\n        else this.state.isAnimationTriggered = true;\n        this.state.tableState = mergedTable;\n    }\n    isEqual(arr1, arr2) {\n        if (arr1.length !== arr2.length) return false;\n        for(let i = 0; i < arr1.length; i++){\n            if (arr1[i].length !== arr2[i].length) return false;\n            for(let j = 0; j < arr1[i].length; j++){\n                if (arr1[i][j] !== arr2[i][j]) return false;\n            }\n        }\n        return true;\n    }\n    getScore() {\n        return this.state.score;\n    }\n    getState() {\n        return this.state.tableState;\n    }\n    getStatus() {\n        return this.state.status;\n    }\n    start() {\n        this.addNewTile();\n        this.addNewTile();\n        this.renderCells();\n        this.state.status = 'playing';\n    }\n    restart() {\n        this.clearTable();\n        this.addNewTile();\n        this.addNewTile();\n        this.renderCells();\n        if (this.state.score > this.state.best) {\n            this.state.best = this.state.score;\n            document.querySelector('.game-best').textContent = this.state.best;\n        }\n        this.state.score = 0;\n        this.state.status = 'playing';\n        document.querySelector('.message-win').classList.add('hidden');\n        document.querySelector('.message-lose').classList.add('hidden');\n    }\n    endGame(gameStatus) {\n        if (gameStatus === 'win') {\n            this.state.status = 'win';\n            document.querySelector('.message-win').classList.remove('hidden');\n        } else {\n            document.querySelector('.message-lose').classList.remove('hidden');\n            this.state.status = 'lose';\n        }\n        if (this.state.score > this.state.best) {\n            this.state.best = this.state.score;\n            document.querySelector('.game-best').textContent = this.state.best;\n        }\n    }\n    clearTable() {\n        this.state.tableState = JSON.parse(JSON.stringify($a5fd07fa01589658$var$Game.initialTable));\n        this.state.pageRows.forEach((row)=>{\n            row.querySelectorAll('.field-cell').forEach((cell)=>{\n                cell.textContent = '';\n            // cell.classList.remove('field-cell--some-class');\n            });\n        });\n    }\n    findEmptyCells() {\n        const mainTable = this.state.tableState;\n        const listOfEmptyCells = [];\n        for(let i = 0; i < mainTable.length; i++){\n            for(let j = 0; j < mainTable[i].length; j++)if (mainTable[i][j] === 0) listOfEmptyCells.push([\n                i,\n                j\n            ]);\n        }\n        return listOfEmptyCells;\n    }\n    addNewTile() {\n        const emtpyCells = this.findEmptyCells();\n        if (emtpyCells.length > 0) {\n            const randomIndex = Math.floor(Math.random() * emtpyCells.length);\n            const [randomRow, randomCol] = emtpyCells[randomIndex];\n            const newTileValue = Math.random() < 0.1 ? 4 : 2;\n            this.state.newTiles.push({\n                newTileValue: newTileValue,\n                rowIndex: randomRow,\n                colIndex: randomCol\n            });\n            this.state.tableState[randomRow][randomCol] = newTileValue;\n        }\n    }\n    renderCells() {\n        const fields = this.state.tableState;\n        this.state.pageRows.forEach((row, rowIndex)=>{\n            const cells = row.querySelectorAll('.field-cell');\n            cells.forEach((cell, cellIndex)=>{\n                const value = fields[rowIndex][cellIndex];\n                const newTiles = this.state.newTiles;\n                if (newTiles.length > 0) newTiles.forEach((newTile)=>{\n                    if (rowIndex === newTile.rowIndex && cellIndex === newTile.colIndex) {\n                        cell.classList.add('tile-popping');\n                        setTimeout(()=>{\n                            cell.classList.remove('tile-popping');\n                            this.state.newTiles = [];\n                        }, this.config.renderTime);\n                    }\n                });\n                if (value === 0) {\n                    cell.textContent = '';\n                    cell.classList.add('hidden-tile');\n                    cell.style.backgroundColor = '';\n                } else {\n                    cell.textContent = value;\n                    cell.classList.remove('hidden-tile');\n                }\n                window.console.log(value);\n                if (value !== 0) {\n                    const cellColors = this.getColorOfCell(value);\n                    cell.style.background = cellColors.backgroundColor;\n                    cell.style.color = cellColors.color;\n                }\n            });\n        });\n    }\n    getColorOfCell(cell) {\n        const colors = {\n            2: {\n                backgroundColor: '#eee4da',\n                color: '#755e47'\n            },\n            4: {\n                backgroundColor: '#ede0c8',\n                color: '#755e47'\n            },\n            8: {\n                backgroundColor: '#f2b179',\n                color: '#ffffff'\n            },\n            16: {\n                backgroundColor: '#f59563',\n                color: '#ffffff'\n            },\n            32: {\n                backgroundColor: '#f67c5f',\n                color: '#ffffff'\n            },\n            64: {\n                backgroundColor: '#f65e3b',\n                color: '#ffffff'\n            },\n            128: {\n                backgroundColor: '#edcf72',\n                color: '#755e47'\n            },\n            256: {\n                backgroundColor: '#edcc61',\n                color: '#755e47'\n            },\n            512: {\n                backgroundColor: '#edc850',\n                color: '#755e47'\n            },\n            1024: {\n                backgroundColor: '#edc53f',\n                color: '#755e47'\n            },\n            2048: {\n                backgroundColor: '#edc22e',\n                color: '#755e47'\n            }\n        };\n        return colors[cell];\n    }\n    // Додаємо таймер для плавності анімації\n    renderTileCSS(direction) {\n        let copyTable = JSON.parse(JSON.stringify(this.state.tableState));\n        if (direction === 'up' || direction === 'down') copyTable = this.rotateCounterClockwise(copyTable);\n        copyTable = copyTable.map((row)=>{\n            const workingRow = [\n                ...row\n            ]; // Створюємо копію рядка для роботи з нею\n            let i = 0;\n            while(i < workingRow.length){\n                if (workingRow[i] === 0) {\n                    i++;\n                    continue;\n                }\n                let sortedWorkingRow = workingRow.slice(i).filter((el)=>el !== 0);\n                let cellCountOfShifts = workingRow.slice(i + 1).filter((el)=>el === 0).length;\n                if (direction === 'left' || direction === 'up') {\n                    sortedWorkingRow = workingRow.slice(0, i + 1).filter((el)=>el !== 0);\n                    cellCountOfShifts = workingRow.slice(0, i).filter((el)=>el === 0).length;\n                }\n                for(let j = 0; j < sortedWorkingRow.length; j++)if (sortedWorkingRow[j] === sortedWorkingRow[j + 1]) {\n                    cellCountOfShifts++;\n                    j++;\n                }\n                row[i] = cellCountOfShifts;\n                i++;\n            }\n            return row;\n        });\n        if (direction === 'up' || direction === 'down') copyTable = this.rotateClockwise(copyTable);\n        this.state.pageRows.forEach((row, rowIndex)=>{\n            const cells = row.querySelectorAll('.field-cell');\n            cells.forEach((cell, cellIndex)=>{\n                const tableCell = copyTable[rowIndex][cellIndex];\n                let shift = tableCell * 92.5;\n                if (direction === 'left' || direction === 'up') shift = shift * -1;\n                if (tableCell !== 0) {\n                    const X = direction === 'left' || direction === 'right' ? shift : 0;\n                    const Y = direction === 'up' || direction === 'down' ? shift : 0;\n                    cell.style.transition = `transform ${this.config.transitionTime}ms cubic-bezier(0.75, 0.65, 0.8, 1.12)`;\n                    cell.style.transform = `translate(${X}px, ${Y}px)`;\n                    // Повертаємо клітинку на місце після завершення анімації\n                    setTimeout(()=>{\n                        requestAnimationFrame(()=>{\n                            cell.style.transition = '';\n                            cell.style.transform = '';\n                        });\n                    }, this.config.renderTime); // Враховуємо час анімації\n                }\n            });\n        });\n        return copyTable.flat().every((el)=>el === 0);\n    }\n}\n$a5fd07fa01589658$exports = $a5fd07fa01589658$var$Game;\n\n\nconst $09e991522ca7e64e$var$startButton = document.querySelector('.button-start');\nconst $09e991522ca7e64e$var$restartButton = document.querySelector('.button-restart');\nconst $09e991522ca7e64e$var$initialRows = [\n    ...document.querySelectorAll('.field-row')\n];\nconst $09e991522ca7e64e$var$score = document.querySelector('.game-score');\nconst $09e991522ca7e64e$var$game = new $a5fd07fa01589658$exports([\n    ...$09e991522ca7e64e$var$initialRows\n]);\n$09e991522ca7e64e$var$startButton.addEventListener('click', ()=>{\n    $09e991522ca7e64e$var$startButton.style.display = 'none';\n    $09e991522ca7e64e$var$restartButton.style.display = 'block';\n    document.querySelector('.message-start').remove();\n    $09e991522ca7e64e$var$game.start();\n});\n$09e991522ca7e64e$var$restartButton.addEventListener('click', ()=>{\n    $09e991522ca7e64e$var$game.restart();\n    $09e991522ca7e64e$var$score.textContent = 0;\n});\ndocument.addEventListener('keydown', (e)=>{\n    if ($09e991522ca7e64e$var$game.state.status === 'playing' && !$09e991522ca7e64e$var$game.state.isAnimating) switch(e.key){\n        case 'ArrowLeft':\n            $09e991522ca7e64e$var$game.moveLeft();\n            break;\n        case 'ArrowRight':\n            $09e991522ca7e64e$var$game.moveRight();\n            break;\n        case 'ArrowUp':\n            $09e991522ca7e64e$var$game.moveUp();\n            break;\n        case 'ArrowDown':\n            $09e991522ca7e64e$var$game.moveDown();\n            break;\n    }\n    window.console.log('---------------------------------------');\n    $09e991522ca7e64e$var$score.textContent = $09e991522ca7e64e$var$game.getScore();\n});\n\n\n//# sourceMappingURL=index.a83f3d05.js.map\n","'use strict';\n\n// Uncomment the next lines to use your game instance in the browser\nconst Game = require('../modules/Game.class');\n\nconst startButton = document.querySelector('.button-start');\nconst restartButton = document.querySelector('.button-restart');\nconst initialRows = [...document.querySelectorAll('.field-row')];\nconst score = document.querySelector('.game-score');\nconst game = new Game([...initialRows]);\n\nstartButton.addEventListener('click', () => {\n  startButton.style.display = 'none';\n  restartButton.style.display = 'block';\n  document.querySelector('.message-start').remove();\n\n  game.start();\n});\n\nrestartButton.addEventListener('click', () => {\n  game.restart();\n  score.textContent = 0;\n});\n\ndocument.addEventListener('keydown', (e) => {\n  if (game.state.status === 'playing' && !game.state.isAnimating) {\n    switch (e.key) {\n      case 'ArrowLeft':\n        game.moveLeft();\n        break;\n      case 'ArrowRight':\n        game.moveRight();\n        break;\n      case 'ArrowUp':\n        game.moveUp();\n        break;\n      case 'ArrowDown':\n        game.moveDown();\n        break;\n    }\n  }\n  window.console.log('---------------------------------------');\n  score.textContent = game.getScore();\n});\n","'use strict';\n\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */\nclass Game {\n  /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */\n\n  static initialTable = [\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n  ];\n\n  constructor(pageRows) {\n    this.state = {\n      newTiles: [],\n      isAnimationTriggered: true,\n      tableState: JSON.parse(JSON.stringify(Game.initialTable)),\n      pageRows: pageRows,\n      score: 0,\n      best: 0,\n      status: 'idle',\n      isAnimating: false,\n    };\n\n    this.config = {\n      transitionTime: 90, // ms\n      renderTime: 100, // ms\n    };\n  }\n\n  moveLeft() {\n    this.executeMove('left');\n  }\n\n  moveRight() {\n    this.executeMove('right');\n  }\n\n  moveUp() {\n    this.executeMove('up');\n  }\n\n  moveDown() {\n    this.executeMove('down');\n  }\n\n  checkGameOver(arr) {\n    const copyArr = JSON.parse(JSON.stringify(arr));\n\n    const isNoHorizontalMerges = copyArr.every((row) => {\n      return row.every((cell, cellIndex) => {\n        if (cell === 0) {\n          return false;\n        }\n\n        if (cellIndex < row.length - 1) {\n          return cell !== row[cellIndex + 1];\n        }\n\n        return true;\n      });\n    });\n\n    const isNoVerticalMerges = this.rotateCounterClockwise(copyArr).every(\n      (row) => {\n        return row.every((cell, cellIndex) => {\n          if (cell === 0) {\n            return false;\n          }\n\n          if (cellIndex < row.length - 1) {\n            return cell !== row[cellIndex + 1];\n          }\n\n          return true;\n        });\n      },\n    );\n\n    if (isNoHorizontalMerges && isNoVerticalMerges) {\n      this.endGame();\n    }\n  }\n\n  async executeMove(direction) {\n    setTimeout(() => {\n      this.state.isAnimating = false; // Анімація завершена\n    }, this.config.renderTime + 20);\n\n    if (this.state.isAnimating) {\n      return;\n    }\n\n    this.state.isAnimating = true;\n\n    this.renderTileCSS(direction); // Очікуємо завершення анімації плиток\n\n    this.handleMovement(direction); // Виконуємо рух на полі\n\n    setTimeout(() => {\n      this.renderCells();\n    }, this.config.renderTime);\n\n    if (this.state.isAnimationTriggered) {\n      this.addNewTile();\n    }\n\n    this.checkGameOver(this.state.tableState);\n  }\n\n  transpose(matrix) {\n    const result = [];\n\n    for (let i = 0; i < matrix[0].length; i++) {\n      result[i] = [];\n\n      for (let j = 0; j < matrix.length; j++) {\n        result[i][j] = matrix[j][i];\n      }\n    }\n\n    return result;\n  }\n\n  rotateClockwise(matrix) {\n    const transposed = this.transpose(matrix);\n\n    for (let i = 0; i < transposed.length; i++) {\n      transposed[i] = transposed[i].reverse();\n    }\n\n    return transposed;\n  }\n\n  rotateCounterClockwise(matrix) {\n    for (let i = 0; i < matrix.length; i++) {\n      matrix[i] = matrix[i].reverse();\n    }\n\n    return this.transpose(matrix);\n  }\n\n  sortZeros(arr, direction) {\n    const zeros = arr.filter((el) => el === 0);\n    const nonZeros = arr.filter((el) => el !== 0);\n\n    if (direction === 'left' || direction === 'up') {\n      return nonZeros.concat(zeros);\n    }\n\n    if (direction === 'down' || direction === 'right') {\n      return zeros.concat(nonZeros);\n    }\n  }\n\n  handleMovement(direction) {\n    let mergedTable = JSON.parse(JSON.stringify(this.state.tableState));\n\n    // Якщо напрямок 'вгору' чи 'вниз' обертаю масив\n    if (direction === 'up' || direction === 'down') {\n      mergedTable = this.rotateCounterClockwise(mergedTable);\n    }\n\n    // Тепер сортуємо та об'єдную рядки\n    mergedTable = mergedTable.map((row, rowIndex) => {\n      const sortedRow = this.sortZeros(row, direction);\n\n      const mergedRow = () => {\n        for (let i = 0; i < sortedRow.length; i++) {\n          if (sortedRow[i] === sortedRow[i + 1]) {\n            sortedRow[i] += sortedRow[i + 1];\n            this.state.score += sortedRow[i];\n\n            if (sortedRow[i] === 137156) {\n              this.endGame('win');\n            }\n\n            sortedRow[i + 1] = 0;\n            i++; // Пропускаємо наступну ітерацію після злиття\n          }\n        }\n\n        return this.sortZeros(sortedRow, direction);\n      };\n\n      return mergedRow();\n    });\n\n    if (this.isEqual(this.state.tableState, mergedTable)) {\n      this.state.isAnimationTriggered = false;\n    } else {\n      this.state.isAnimationTriggered = true;\n    }\n\n    // Якщо напрямок 'вгору' чи 'вниз' обертаю масив назад\n    if (direction === 'up' || direction === 'down') {\n      mergedTable = this.rotateClockwise(mergedTable);\n    }\n\n    if (this.isEqual(this.state.tableState, mergedTable)) {\n      this.state.isAnimationTriggered = false;\n    } else {\n      this.state.isAnimationTriggered = true;\n    }\n\n    this.state.tableState = mergedTable;\n  }\n\n  isEqual(arr1, arr2) {\n    if (arr1.length !== arr2.length) {\n      return false;\n    }\n\n    for (let i = 0; i < arr1.length; i++) {\n      if (arr1[i].length !== arr2[i].length) {\n        return false;\n      }\n\n      for (let j = 0; j < arr1[i].length; j++) {\n        if (arr1[i][j] !== arr2[i][j]) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n\n  getScore() {\n    return this.state.score;\n  }\n\n  getState() {\n    return this.state.tableState;\n  }\n\n  getStatus() {\n    return this.state.status;\n  }\n\n  start() {\n    this.addNewTile();\n    this.addNewTile();\n    this.renderCells();\n\n    this.state.status = 'playing';\n  }\n\n  restart() {\n    this.clearTable();\n    this.addNewTile();\n    this.addNewTile();\n    this.renderCells();\n\n    if (this.state.score > this.state.best) {\n      this.state.best = this.state.score;\n      document.querySelector('.game-best').textContent = this.state.best;\n    }\n\n    this.state.score = 0;\n    this.state.status = 'playing';\n\n    document.querySelector('.message-win').classList.add('hidden');\n    document.querySelector('.message-lose').classList.add('hidden');\n  }\n\n  endGame(gameStatus) {\n    if (gameStatus === 'win') {\n      this.state.status = 'win';\n      document.querySelector('.message-win').classList.remove('hidden');\n    } else {\n      document.querySelector('.message-lose').classList.remove('hidden');\n      this.state.status = 'lose';\n    }\n\n    if (this.state.score > this.state.best) {\n      this.state.best = this.state.score;\n      document.querySelector('.game-best').textContent = this.state.best;\n    }\n  }\n\n  clearTable() {\n    this.state.tableState = JSON.parse(JSON.stringify(Game.initialTable));\n\n    this.state.pageRows.forEach((row) => {\n      row.querySelectorAll('.field-cell').forEach((cell) => {\n        cell.textContent = '';\n        // cell.classList.remove('field-cell--some-class');\n      });\n    });\n  }\n\n  findEmptyCells() {\n    const mainTable = this.state.tableState;\n    const listOfEmptyCells = [];\n\n    for (let i = 0; i < mainTable.length; i++) {\n      for (let j = 0; j < mainTable[i].length; j++) {\n        if (mainTable[i][j] === 0) {\n          listOfEmptyCells.push([i, j]);\n        }\n      }\n    }\n\n    return listOfEmptyCells;\n  }\n\n  addNewTile() {\n    const emtpyCells = this.findEmptyCells();\n\n    if (emtpyCells.length > 0) {\n      const randomIndex = Math.floor(Math.random() * emtpyCells.length);\n      const [randomRow, randomCol] = emtpyCells[randomIndex];\n      const newTileValue = Math.random() < 0.1 ? 4 : 2;\n\n      this.state.newTiles.push({\n        newTileValue,\n        rowIndex: randomRow,\n        colIndex: randomCol,\n      });\n\n      this.state.tableState[randomRow][randomCol] = newTileValue;\n    }\n  }\n\n  renderCells() {\n    const fields = this.state.tableState;\n\n    this.state.pageRows.forEach((row, rowIndex) => {\n      const cells = row.querySelectorAll('.field-cell');\n\n      cells.forEach((cell, cellIndex) => {\n        const value = fields[rowIndex][cellIndex];\n        const newTiles = this.state.newTiles;\n\n        if (newTiles.length > 0) {\n          newTiles.forEach((newTile) => {\n            if (\n              rowIndex === newTile.rowIndex &&\n              cellIndex === newTile.colIndex\n            ) {\n              cell.classList.add('tile-popping');\n\n              setTimeout(() => {\n                cell.classList.remove('tile-popping');\n                this.state.newTiles = [];\n              }, this.config.renderTime);\n            }\n          });\n        }\n\n        if (value === 0) {\n          cell.textContent = '';\n          cell.classList.add('hidden-tile');\n          cell.style.backgroundColor = '';\n        } else {\n          cell.textContent = value;\n          cell.classList.remove('hidden-tile');\n        }\n        window.console.log(value);\n\n        if (value !== 0) {\n          const cellColors = this.getColorOfCell(value);\n\n          cell.style.background = cellColors.backgroundColor;\n          cell.style.color = cellColors.color;\n        }\n      });\n    });\n  }\n\n  getColorOfCell(cell) {\n    const colors = {\n      2: { backgroundColor: '#eee4da', color: '#755e47' },\n      4: { backgroundColor: '#ede0c8', color: '#755e47' },\n      8: { backgroundColor: '#f2b179', color: '#ffffff' },\n      16: { backgroundColor: '#f59563', color: '#ffffff' },\n      32: { backgroundColor: '#f67c5f', color: '#ffffff' },\n      64: { backgroundColor: '#f65e3b', color: '#ffffff' },\n      128: { backgroundColor: '#edcf72', color: '#755e47' },\n      256: { backgroundColor: '#edcc61', color: '#755e47' },\n      512: { backgroundColor: '#edc850', color: '#755e47' },\n      1024: { backgroundColor: '#edc53f', color: '#755e47' },\n      2048: { backgroundColor: '#edc22e', color: '#755e47' },\n    };\n\n    return colors[cell];\n  }\n\n  // Додаємо таймер для плавності анімації\n  renderTileCSS(direction) {\n    let copyTable = JSON.parse(JSON.stringify(this.state.tableState));\n\n    if (direction === 'up' || direction === 'down') {\n      copyTable = this.rotateCounterClockwise(copyTable);\n    }\n\n    copyTable = copyTable.map((row) => {\n      const workingRow = [...row]; // Створюємо копію рядка для роботи з нею\n\n      let i = 0;\n\n      while (i < workingRow.length) {\n        if (workingRow[i] === 0) {\n          i++;\n          continue;\n        }\n\n        let sortedWorkingRow = workingRow.slice(i).filter((el) => el !== 0);\n        let cellCountOfShifts = workingRow\n          .slice(i + 1)\n          .filter((el) => el === 0).length;\n\n        if (direction === 'left' || direction === 'up') {\n          sortedWorkingRow = workingRow\n            .slice(0, i + 1)\n            .filter((el) => el !== 0);\n\n          cellCountOfShifts = workingRow\n            .slice(0, i)\n            .filter((el) => el === 0).length;\n        }\n\n        for (let j = 0; j < sortedWorkingRow.length; j++) {\n          if (sortedWorkingRow[j] === sortedWorkingRow[j + 1]) {\n            cellCountOfShifts++;\n            j++;\n          }\n        }\n\n        row[i] = cellCountOfShifts;\n        i++;\n      }\n\n      return row;\n    });\n\n    if (direction === 'up' || direction === 'down') {\n      copyTable = this.rotateClockwise(copyTable);\n    }\n\n    this.state.pageRows.forEach((row, rowIndex) => {\n      const cells = row.querySelectorAll('.field-cell');\n\n      cells.forEach((cell, cellIndex) => {\n        const tableCell = copyTable[rowIndex][cellIndex];\n\n        let shift = tableCell * 92.5;\n\n        if (direction === 'left' || direction === 'up') {\n          shift = shift * -1;\n        }\n\n        if (tableCell !== 0) {\n          const X = direction === 'left' || direction === 'right' ? shift : 0;\n          const Y = direction === 'up' || direction === 'down' ? shift : 0;\n\n          cell.style.transition = `transform ${this.config.transitionTime}ms cubic-bezier(0.75, 0.65, 0.8, 1.12)`;\n          cell.style.transform = `translate(${X}px, ${Y}px)`;\n\n          // Повертаємо клітинку на місце після завершення анімації\n          setTimeout(() => {\n            requestAnimationFrame(() => {\n              cell.style.transition = '';\n              cell.style.transform = '';\n            });\n          }, this.config.renderTime); // Враховуємо час анімації\n        }\n      });\n    });\n\n    return copyTable.flat().every((el) => el === 0);\n  }\n}\n\nmodule.exports = Game;\n"],"names":["$a5fd07fa01589658$exports","$a5fd07fa01589658$var$Game","initialTable","constructor","pageRows","state","newTiles","isAnimationTriggered","tableState","JSON","parse","stringify","score","best","status","isAnimating","config","transitionTime","renderTime","moveLeft","executeMove","moveRight","moveUp","moveDown","checkGameOver","arr","copyArr","isNoHorizontalMerges","every","row","cell","cellIndex","length","isNoVerticalMerges","rotateCounterClockwise","endGame","direction","setTimeout","renderTileCSS","handleMovement","renderCells","addNewTile","transpose","matrix","result","i","j","rotateClockwise","transposed","reverse","sortZeros","zeros","filter","el","nonZeros","concat","mergedTable","map","rowIndex","sortedRow","mergedRow","isEqual","arr1","arr2","getScore","getState","getStatus","start","restart","clearTable","document","querySelector","textContent","classList","add","gameStatus","remove","forEach","querySelectorAll","findEmptyCells","mainTable","listOfEmptyCells","push","emtpyCells","randomIndex","Math","floor","random","randomRow","randomCol","newTileValue","colIndex","fields","cells","value","newTile","style","backgroundColor","window","console","log","cellColors","getColorOfCell","background","color","colors","copyTable","workingRow","sortedWorkingRow","slice","cellCountOfShifts","tableCell","shift","X","Y","transition","transform","requestAnimationFrame","flat","$09e991522ca7e64e$var$startButton","$09e991522ca7e64e$var$restartButton","$09e991522ca7e64e$var$initialRows","$09e991522ca7e64e$var$score","$09e991522ca7e64e$var$game","addEventListener","display","e","key"],"version":3,"file":"index.a83f3d05.js.map"}